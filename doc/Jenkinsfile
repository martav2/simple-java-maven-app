// Inicio de nuestro pipeline
pipeline {
 // Indicamos que no queremos un agente general para todo el
 // pipeline. Además decimos que se salta las etapas una vez
 // el pipeline quede inestable
 agent none
 options {
 skipStagesAfterUnstable()
 }
 // Aquí definimos las distintas etapas
 stages {
 // Para la primera etapa, de construcción, usaremos la
 // imagen docker y lo que haremos es el comando definito
 // en los 'pasos' o 'steps'
 stage('Build') {
 agent {
 docker {
 image 'maven:3.9.9-amazoncorretto-17'
 }
 }
 steps {
 sh 'mvn -B -DskipTests clean package'
 }
 }
 // Esta es la etapa de los tests, usamos la misma imagen
 // pero esta vez tenemos una etapa posterior, que sirve
 // para procesar los ficheros .xml con junit
 stage('Test') {
 agent {
 docker {
 image 'maven:3.9.9-amazoncorretto-17'
 }
 }
 steps {
 sh 'mvn test'
 }
 post {
 always {
 junit 'target/surefire-reports/*.xml'
 }
 }
 }
 // Esta es la etapa final, la de entrega, ejecuta el
 // deliver.sh que realiza la entrega
Readme.md 2024-12-22
8 / 9
 stage('Deliver') {
 agent {
 docker {
 image 'maven:3.9.9-amazoncorretto-17'
 }
 }
 steps {
 sh './jenkins/scripts/deliver.sh'
 }
 }
 }
}
